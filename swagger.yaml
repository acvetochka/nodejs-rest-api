openapi: 3.0.3
info:
  version: 1.0.0
  title: Phonecontacts API
  description: Swagger to work with the Goose Track backend.
# consumes:
#   - application/json
# produces:
#   - application/json
servers:
  - url: http://localhost:3000/api
tags:
  - name: Users
  - name: Contacts
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Creat a new user
      requestBody:
        $ref: '#/components/requestBodies/RegisterUser'
      responses:
        '201':
          $ref: '#/components/responses/UserIsRegistered'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '409':
          $ref: '#/components/responses/errorEmailInUse'
  /users/login:
    post:
      tags:
        - Users
      summary: Login user
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'
      responses:
        '201':
          $ref: '#/components/responses/UserIsAuthorized'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          $ref: '#/components/responses/EmailIsUnverifited'
  /users/logout:
    post:
      tags:
        - Users
      summary: Logout user
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '204':
          description: Logout success
        '401':
          description: Not authorized
  /users/verify:
    post:
      tags: 
        - Users
      summary: Send verification email
      requestBody: 
        $ref: '#/components/requestBodies/ReturnVerify'
      responses: 
        '200':
          description: Verification email sent
        '400':
          description: "missing required field email || Verification has already been passed"
          
  /users/verify/{verificationToken}:
    get:
      tags:
        - Users
      summary: New user verification
      parameters: 
        - in: path
          name: verificationToken
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Verification successful
        '401':
          description: User not found
        
  /users/current:
    get:
      tags:
        - Users
      summary: Get current user info
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/CurrentUserResponse'
        '401':
          description: Not authorized
  /users/avatars:
    patch:
      tags:
        - Users
      summary: Update user avatar
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      requestBody:
        description: application/form-data
        required: true
        $ref: '#/components/requestBodies/UpdateAvatarRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateAvatarResponse'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get list of contacts
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses: 
        '200':
          $ref: '#/components/responses/GetListContactsResponse'
        '401':
          description: Not authorized
    post:
      tags: 
        - Contacts
      summary: Add contact
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      requestBody: 
        $ref: '#/components/requestBodies/AddContactRequest'
      responses:
        '201':
          $ref: '#/components/responses/AddContactResponse'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
  
  /contacts/{contactId}:
    get:
      tags:
        - Contacts
      summary: Get contact by Id
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: contactId
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/GetContactByIdResponse'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
    delete:
      tags: 
        - Contacts
      summary: Delete contact
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: contactId
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          description: Contact deleted
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
    put:
      tags: 
        - Contacts
      summary: Update contact
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: contactId
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/UpdateContactResponse'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
  /contacts/{contactId}/favorite:
    patch: 
      tags:
        - Contacts
      summary: Update contact
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
        - in: path
          name: contactId
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          $ref: '#/components/responses/UpdateStatusContactResponse'
        '400':
          $ref: '#/components/responses/errorBadRequesResponse'
        '401':
          description: Not authorized
      
components:
  # schemas:
  requestBodies:
    RegisterUser:
      description: Registration request parameters
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: Users email
                format: email
              password:
                type: string
                description: Users password
                example: qwerty12345
    LoginUser:
      description: Request parameters for authorization
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: Users email
                format: email
              password:
                type: string
                description: Users password
                example: qwerty12345
    ReturnVerify:
      description: Request parameters for verification
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: User's email
                format: email
    UpdateAvatarRequest:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              avatarURL:
                # type: file
                description: file
    AddContactRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: 
                type: string
                description: User's name
                example: User
              email:
                type: string
                description: User's email
                format: email
              phone:
                type: string
                description: User's phone number
                example: +380444000000
  responses:
    UserIsRegistered:
      description: New User Registered
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  email:
                    type: string
                    description: Users email
                    format: email
                  subscription:
                    type: string
                    description: Users subscription
                    example: starter
                  avatarURL: 
                    type: string
                    description: Avatar URL
                    example: "//www.gravatar.com/avatar/cbe239996693a90dec357d80c65848b7"
    errorBadRequesResponse:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                description: Error status code
                example: '400'
              message:
                type: string
                description: Error message
                example: Bad request
    errorEmailInUse:
      description: User with such email already exists
      content: 
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                description: Error status code
                example: "409"
              message: 
                type: string
                description: Error message
                example: Email in use
    UserIsAuthorized:
      description: User Authorization
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: Users token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7SxrjM
              user:
                type: object
                properties:
                  email:
                    type: string
                    description: Users email
                    format: email
                  subscription:
                    type: string
                    description: Users subscription
                    example: starter
    EmailIsUnverifited:
      description: Unauthorize
      content: 
        application/json:
          schema: 
            type: object
            properties:
              status:
                type: integer
                description: Error status code
                example: '401'
              message:
                type: string
                description: Error message
                example: Please verify your email
    CurrentUserResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                description: User's email
                format: email
              subscription:
                type: string
                description: user subscription
                example: starter
    UpdateAvatarResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              avatarURL:
                type: string
                description: Avatar URL
                example: http://res.cloudinary.com/photo.jpg
    GetListContactsResponse:
      description: Successful operation
      content:
        aplication/json:
          schema:
            type: array
            items:
              type: object
              properties:
                _id: 
                  type: string
                  description: id for contact
                  example: 65fc1cb225541de40f2d5ef4
                name: 
                  type: string
                  description: contact's name
                  example: User
                email:
                  type: string
                  description: contact's email
                  format: email
                phone:
                  type: string
                  description: contact's phone
                  example: +380444000000
                favorite:
                  type: boolean
                  example: false
                owner:
                  type: object
                  properties: 
                    _id:
                      type: string
                      description: id for user
                      example: 65fc149f25541de40f2d5ee3
                    email:
                      type: string
                      description: contact's email
                      format: email
    AddContactResponse:
      description: New contact created
      content:
        aplication/json:
          schema:
            type: object
            properties:
              name: 
                type: string
                description: contact's name
                example: User
              email:
                type: string
                description: contact's email
                format: email
              phone:
                type: string
                description: contact's phone
                example: +380444000000
              favorite:
                type: boolean
                example: false
              owner:
                type: string
                description: id for user
                example: 65fc149f25541de40f2d5ee3
              _id: 
                type: string
                description: id for contact
                example: 65fc1cb225541de40f2d5ef4
              createdAt: 
                type: string
                description: date for creating
                format: date-time
              updateAt:
                type: string
                description: date for updating
                format: date-time
    GetContactByIdResponse:
      description: Successful operation
      content:
        aplication/json:
          schema:
            type: object
            properties:
              _id: 
                type: string
                description: id for contact
                example: 65fc1cb225541de40f2d5ef4
              name: 
                type: string
                description: contact's name
                example: User
              email:
                type: string
                description: contact's email
                format: email
              phone:
                type: string
                description: contact's phone
                example: +380444000000
              favorite:
                type: boolean
                example: false
              owner:
                type: string
                description: id for user
                example: 65fc149f25541de40f2d5ee3
              createdAt: 
                type: string
                description: date for creating
                format: date-time
              updateAt:
                type: string
                description: date for updating
                format: date-time
    UpdateContactResponse:
      $ref: '#/components/responses/GetContactByIdResponse'
    UpdateStatusContactResponse:
      $ref: '#/components/responses/GetContactByIdResponse'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT